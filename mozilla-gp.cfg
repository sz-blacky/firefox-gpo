//

(function() {
	
	var readRegistryValue = function(registry, value){
	  switch (registry.getValueType(value)) {
		case registry.TYPE_STRING:
		  return registry.readStringValue(value);
		case registry.TYPE_BINARY:
		  return registry.readBinaryValue(value);
		case registry.TYPE_INT:
		  return registry.readIntValue(value);
		case registry.TYPE_INT64:
		  return registry.readInt64Value(value);
	  }
	  return null;
	};
	
	var readGPOSettings = function(registry, registryHive, registryKey, type) {
		try {
			registry.open(registryHive,
				 "Software\\Policies\\Mozilla\\" + registryKey,
				 registry.ACCESS_READ);
		} catch (e) {
			/* No settings defined */
			return;
		}
		for(var i = 0; i < registry.valueCount; i++) {
			var settingName = registry.getValueName(i);
			var value = readRegistryValue(registry, settingName);
			type(settingName, value);
		}
		registry.close();
	};

	var getLocalType = 	function(value){
		var returnValue = "string";
		if (value == "true" || value == "false") {
			return "bool"
		} else {
			try {
				if (value > -1 ) {
					return "int"
				}
			} catch(ex) {}
		}
		return returnValue;
	};
	
	var writeLockedPrefValue = function(prefService) {
		return function(name, value) {
			var prefBranch = prefService.getDefaultBranch(name);
			switch (prefBranch.getPrefType("")) {
				case prefBranch.PREF_STRING:
					prefBranch.setCharPref("", value);
					prefBranch.lockPref("");
					return true;
				case prefBranch.PREF_INT:
					prefBranch.setIntPref("", value);
					prefBranch.lockPref("");
					return true;
				case prefBranch.PREF_BOOL:
					if ( value == "false" || value == 0){
						prefBranch.setBoolPref("", false);
					}else{
						prefBranch.setBoolPref("", true);
					}
					prefBranch.lockPref("");
					return true;
				default:
					switch(getLocalType(value))
					{
						case "string":
							if (value == "false") {
								prefBranch.setBoolPref("", false);
							} else {
								prefBranch.setBoolPref("", true);
							}
							return true;
						case "int":
							prefBranch.setIntPref("", value);
							return true;
						case "bool":
							prefBranch.setBoolPref("", false);
							return true;
						default:
							return false;
					}
			}
			return null;
		};
	};
	
	var writeUserPrefValue = function(prefService) {
		return function(name, value) {
			var prefBranch = prefService.getDefaultBranch(name);
			switch (prefBranch.getPrefType("")) {
				case prefBranch.PREF_STRING:
					prefBranch.setCharPref("", value);
					return true;
				case prefBranch.PREF_INT:
					prefBranch.setIntPref("", value);
					return true;
				case prefBranch.PREF_BOOL:
					if ( value == "false" || value == 0){
						prefBranch.setBoolPref("", false);
					}else{
						prefBranch.setBoolPref("", true);
					}
					return true;
				default:
					switch(getLocalType(value))
					{
						case "string":
							prefBranch.setCharPref("", value);
							return true;
						case "int":
							prefBranch.setIntPref("", value);
							return true;
						case "bool":
						if ( value == "false" ){
							prefBranch.setBoolPref("", false);
						}else{
							prefBranch.setBoolPref("", true);
						}
							return true;
						default:
							return false;
					}
			}
			return null;
		};
	};
	
	try {
		var registry = Components.classes["@mozilla.org/windows-registry-key;1"].createInstance(Components.interfaces.nsIWindowsRegKey);
		var prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService);
		readGPOSettings(registry, registry.ROOT_KEY_LOCAL_MACHINE, "defaultPref", writeUserPrefValue(prefs));
		readGPOSettings(registry, registry.ROOT_KEY_CURRENT_USER, "defaultPref", writeUserPrefValue(prefs));
		readGPOSettings(registry, registry.ROOT_KEY_LOCAL_MACHINE, "lockPref", writeLockedPrefValue(prefs));
		readGPOSettings(registry, registry.ROOT_KEY_CURRENT_USER, "lockPref", writeLockedPrefValue(prefs));
	} catch(x) {
		displayError(x);
	}
})();